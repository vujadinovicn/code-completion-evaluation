{
    "input": "<fim_prefix>def test(model, testing_data_loader, device, loss_fn, optimizer):\n  testing_accuracy = 0\n<fim_suffix>\n      for x_batch, y_batch in testing_data_loader:\n          x_batch = x_batch.to(device)\n          y_batch = y_batch.to(device)\n          prediction = model(x_batch)[:, 0]\n          is_prediction_correct = ((prediction>=0.5).float() == y_batch).float()\n          testing_accuracy += is_prediction_correct.sum().cpu()\n  testing_accuracy /= len(testing_data_loader.dataset)\n  print(f'Test accuracy: {testing_accuracy:.4f}')<fim_middle>",
    "gt_fim_middle": "  model.eval()\n  with torch.no_grad():",
    "output": "<fim_prefix>def test(model, testing_data_loader, device, loss_fn, optimizer):\n  testing_accuracy = 0\n<fim_suffix>\n      for x_batch, y_batch in testing_data_loader:\n          x_batch = x_batch.to(device)\n          y_batch = y_batch.to(device)\n          prediction = model(x_batch)[:, 0]\n          is_prediction_correct = ((prediction>=0.5).float() == y_batch).float()\n          testing_accuracy += is_prediction_correct.sum().cpu()\n  testing_accuracy /= len(testing_data_loader.dataset)\n  print(f'Test accuracy: {testing_accuracy:.4f}')<fim_middle>    for i, (x_batch, y_batch) in enumerate(testing_data_loader):<|endoftext|>",
    "predicted_fim_middle": "    for i, (x_batch, y_batch) in enumerate(testing_data_loader):"
}