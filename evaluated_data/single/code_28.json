{
    "input": "<fim_prefix>def __init__(self, input_channels, hidden_channels=64):\n        super(Discriminator, self).__init__()\n        self.upfeature = FeatureMapBlock(input_channels, hidden_channels)\n        self.contract1 = EncoderBlock(hidden_channels, use_bn=False, kernel_size=4, activation='lrelu')\n        self.contract2 = EncoderBlock(hidden_channels * 2, kernel_size=4, activation='lrelu')\n<fim_suffix>\n        self.final = nn.Conv2d(hidden_channels * 8, 1, kernel_size=1)<fim_middle>",
    "gt_fim_middle": "        self.contract3 = EncoderBlock(hidden_channels * 4, kernel_size=4, activation='lrelu')",
    "output": "<fim_prefix>def __init__(self, input_channels, hidden_channels=64):\n        super(Discriminator, self).__init__()\n        self.upfeature = FeatureMapBlock(input_channels, hidden_channels)\n        self.contract1 = EncoderBlock(hidden_channels, use_bn=False, kernel_size=4, activation='lrelu')\n        self.contract2 = EncoderBlock(hidden_channels * 2, kernel_size=4, activation='lrelu')\n<fim_suffix>\n        self.final = nn.Conv2d(hidden_channels * 8, 1, kernel_size=1)<fim_middle>        self.contract3 = EncoderBlock(hidden_channels * 4, kernel_size=4, activation='lrelu')\n\n        self.conv1 = nn.Sequential(\n            nn.ConvTranspose2d(hidden_channels, 512, kernel_size=4),\n            nn.BatchNorm2d(512),\n            nn.ReLU(),\n            nn.ConvTranspose2d(512, 256, kernel_size=4),\n            nn.BatchNorm2d(256),\n            nn.ReLU()\n        )\n        self.conv2 = nn.Sequential(\n            nn.ConvTranspose2d(256, 128, kernel_size=4),\n            nn.BatchNorm2d(128),\n            nn.ReLU(),\n            nn.ConvTranspose2d(128, 64, kernel_size=4),\n            nn.BatchNorm2d(64),\n            nn.ReLU()\n        )\n\n    def forward(self, x):\n        out = self.upfeature(x)\n        contract1 = self.contract1(out)\n        contract2 = self.contract2(contract1)\n        contract3 = self.contract3(contract",
    "predicted_fim_middle": "        self.contract3 = EncoderBlock(hidden_channels * 4, kernel_size=4, activation='lrelu')\n\n        self.conv1 = nn.Sequential(\n            nn.ConvTranspose2d(hidden_channels, 512, kernel_size=4),\n            nn.BatchNorm2d(512),\n            nn.ReLU(),\n            nn.ConvTranspose2d(512, 256, kernel_size=4),\n            nn.BatchNorm2d(256),\n            nn.ReLU()\n        )\n        self.conv2 = nn.Sequential(\n            nn.ConvTranspose2d(256, 128, kernel_size=4),\n            nn.BatchNorm2d(128),\n            nn.ReLU(),\n            nn.ConvTranspose2d(128, 64, kernel_size=4),\n            nn.BatchNorm2d(64),\n            nn.ReLU()\n        )\n\n    def forward(self, x):\n        out = self.upfeature(x)\n        contract1 = self.contract1(out)\n        contract2 = self.contract2(contract1)\n        contract3 = self.contract3(contract"
}