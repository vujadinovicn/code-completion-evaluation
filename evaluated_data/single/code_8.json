{
    "input": "<fim_prefix>def download_datasets(dataset_path, training_transform, test_transform, extract_young):\n    training_dataset = torchvision.datasets.CelebA(dataset_path, split='train', target_type='attr', download=False, transform=training_transform, target_transform=extract_young)\n    validation_dataset = torchvision.datasets.CelebA(dataset_path, split='valid', target_type='attr', download=False, transform=test_transform, target_transform=extract_young)\n<fim_suffix>\n    return training_dataset, validation_dataset, testing_dataset<fim_middle>",
    "gt_fim_middle": "    testing_dataset = torchvision.datasets.CelebA(dataset_path, split='test', target_type='attr', download=False, transform=test_transform, target_transform=extract_young)",
    "output": "<fim_prefix>def download_datasets(dataset_path, training_transform, test_transform, extract_young):\n    training_dataset = torchvision.datasets.CelebA(dataset_path, split='train', target_type='attr', download=False, transform=training_transform, target_transform=extract_young)\n    validation_dataset = torchvision.datasets.CelebA(dataset_path, split='valid', target_type='attr', download=False, transform=test_transform, target_transform=extract_young)\n<fim_suffix>\n    return training_dataset, validation_dataset, testing_dataset<fim_middle>    testing_dataset = torchvision.datasets.CelebA(dataset_path, split='test', target_type='attr', download=False, transform=test_transform, target_transform=extract_young)<|endoftext|>",
    "predicted_fim_middle": "    testing_dataset = torchvision.datasets.CelebA(dataset_path, split='test', target_type='attr', download=False, transform=test_transform, target_transform=extract_young)"
}